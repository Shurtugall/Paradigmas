# 1.Defina uma função somaQuad(x,y) que calcule a soma dos
#quadrados de dois números x e y.
def hasEqHeads(l1,l2):
    return l1[0] == l2[0]

# 2.Crie uma função hasEqHeads(l1,l2) que verifique se as
#listas l1 e l2 possuem o mesmo primeiro elemento. '''
def somaQuad(x, y):
    return pow(x,2) + pow(y,2)

# 3.Escreva uma função que receba uma lista de nomes e retorne uma lista com
#a string "Sr. " adicionada ao início de cada nome.
#Defina uma função auxiliar para ajudar neste exercício.

def adiciona_sr(caractere):
    return 'Sr.' + caractere

def sr(lista):
    return list(map(adiciona_sr, lista))


# 4.Crie uma função que receba uma string e retorne o número de espaços nela contidos.
# Defina uma função auxiliar para ajudar neste exercício.

def verifica_espaco(elemento):
    return elemento == ' '

def espaco(lista):
    return len(list(filter(verifica_espaco, lista)))

# 5.Escreva uma função que, dada uma lista de números, calcule 3n*2 + 2/n + 1
# para cada número n da lista. Defina uma função auxiliar para ajudar neste exercício.

def multiplica(n):
    return 3*n*2 + 2/n + 1

def recebe_numeros(lista_num):
    return list(map(multiplica, lista_num))

# 6.Escreva uma função que, dada uma lista de números, retorne uma lista com apenas
# os que forem negativos. Defina uma função auxiliar para ajudar neste exercício.

def verifica_negativos(numero):
    return numero < 0

def negativos(lista_num):
    return list(filter(verifica_negativos, lista_num))

# 7.Escreva uma função que receba uma lista de números e retorne somente os que
# estiverem entre 1 e 100, inclusive. Defina uma função auxiliar para ajudar neste exercício.

def verifica_1_100(numero):
    return numero > 1 and numero < 100

def num_0_100(lista_num):
    return list(filter(verifica_1_100, lista_num))

# 8.Escreva uma função que receba uma lista de números e retorne somente aqueles que
# forem pares. Defina uma função auxiliar para ajudar neste exercício.

def verifica_pares(numero):
    return numero % 2 == 0

def pares(lista_num):
    return list(filter(verifica_pares, lista_num))

# 9.Crie uma função charFound(c,s) que verifique se o caracter c está contido na string.
# O resultado deve ser True ou False. Você não deve usar o operador in.
# Defina uma função auxiliar para ajudar neste exercício.

def charFound(c,lista):
    def localiza(x):
        return x == c
    return len(list(filter(localiza, lista))) > 0



#main
def main():
    l1 = [1, 2, 3, 4]
    l2 = [2, 5, 7, 8]
    x = float(input("Digite um numero: "))
    y = float(input("Digite outro numero: "))
    print(somaQuad(x, y))
    print("Listas l1, l2 são iguais?:")
    print(hasEqHeads(l1, l2))
    lista = ['Idle', 'Chapman', ' ', 'Cleese', 'Palin', 'Jones']
    print(sr(lista))
    print("Numero de espaços na lista:")
    print(espaco(lista))
    lista_num = [2, 3, 4, -5]
    print(recebe_numeros(lista_num))
    print("Numeros negativos da lista:")
    print(negativos(lista_num))
    print("Numeros entre 1 e 100:")
    print(num_0_100(lista_num))
    print("Numeros pares da lista:")
    print(pares(lista_num))
    c = input("Digite uma letra: ")
    s = "Hello"
    print("A letra pertence a string?")
    print(charFound(c, s))

main()
